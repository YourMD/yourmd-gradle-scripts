//
// build.gradle
//

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain

buildscript {
    ext {
        // gradle
        gradleVersion = "2.13"
        gradleReleasePluginVersion = "2.4.0"
        gradleDependencyMananagementVersion = "0.5.6.RELEASE"

        // groovy
        groovyVersion = "2.4.6"

        // logging
        slf4jVersion = "1.7.21"
        logbackVersion = "1.1.7"
        log4j2Version = "2.5"

        // testing
        assertjVersion = "3.4.1"
        spockVersion = "1.0-groovy-2.4"
        cglibVersion = "3.2.2"

        // misc
        lombokVersion = "1.16.8"
        servletVersion = "3.1.0"
        bugsnagVersion = "2.0.0"

        // swagger/springfox
        swaggerVersion = "1.5.9"
        springfoxVersion = "2.4.0"

        // spring
        springBootVersion = "1.3.5.RELEASE"

        // AWS
        awsSdkVersion = "1.10.76"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "com.amazonaws:aws-java-sdk:${awsSdkVersion}"
        classpath "net.researchgate:gradle-release:${gradleReleasePluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${gradleDependencyMananagementVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

def setupAwsCredentials = {
    awsCredentials ->
        def defaultCredentials = new DefaultAWSCredentialsProviderChain().getCredentials()
        awsCredentials.accessKey = defaultCredentials.getAWSAccessKeyId()
        awsCredentials.secretKey = defaultCredentials.getAWSSecretKey()
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "io.spring.dependency-management"
apply plugin: "net.researchgate.release"
apply plugin: "com.orctom.applyscript"

allprojects {
    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven"
    apply plugin: "maven-publish"

    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.orctom.applyscript"

    // java bytecode version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

        maven {
            name "ymdreleases"
            url 's3://yourmd-artifacts/maven/releases'
            credentials(AwsCredentials, setupAwsCredentials)
        }
        maven {
            name "ymdsnapshots"
            url 's3://yourmd-artifacts/maven/snapshots'
            credentials(AwsCredentials, setupAwsCredentials)
        }
    }

    // create jar only if there is something to package
    jar {
        onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    }

    // create sources jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task awsCredentials << {
        description "Displays AWS client credentials."
        def creds = project.repositories.ymdreleases.getCredentials(AwsCredentials)
        println("AWS accessKey: " + creds.accessKey)
        println("AWS secretKey: " + creds.secretKey)
    }

    task repositories << {
        description "Displays all configured repositories."
        project.repositories.each {
            printf("%-30s %s\n", it.name, it.url)
        }
    }

    task downloadDeps(type: Copy) {
        description "Downloads all required dependencies."
        from configurations.compileOnly, configurations.compile, configurations.testCompile, configurations.testRuntime
        into 'build/downloaded-dependencies'
        exclude '**/*.*'
    }

    task lsPlugins << {
        description "Displays enabled plugins."
        project.plugins.each {   println it.getClass().getSimpleName() }
    }

    // compile groovy sources with invokedynamic support
    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
    }

    publishing {
        repositories {
            // https://discuss.gradle.org/t/maven-publish-specify-a-repo-as-being-a-snapshot-repo/374
            add project.version.endsWith('-SNAPSHOT') ?
                    project.repositories.ymdsnapshots : project.repositories.ymdreleases
        }

        publications {
            main(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
        }
    }

    // managed dependencies.
    dependencyManagement {
        dependencies {
            // groovy
            // groovy: invoke dynamic version
            dependency "org.codehaus.groovy:groovy-all:${groovyVersion}:indy"

            // logging
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
            dependency "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
            dependency "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
            dependency "org.slf4j:slf4j-jdk14:${slf4jVersion}"

            dependency "ch.qos.logback:logback-classic:${logbackVersion}"
            dependency "org.apache.logging.log4j:log4j-api:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-core:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"
            
            // swagger/springfox
            dependency "io.swagger:swagger-annotations:${swaggerVersion}"
            dependency "io.springfox:springfox-swagger2:${springfoxVersion}"
            dependency "io.springfox:springfox-swagger-ui:${springfoxVersion}"
            dependency "io.springfox:springfox-staticdocs:${springfoxVersion}"
            dependency "io.github.swagger2markup:swagger2markup-import-files-ext:1.0.0"
            dependency "io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.0.0"
            dependency "io.github.swagger2markup:swagger2markup-import-schemas-ext:1.0.0"


            // testing
            dependency "org.spockframework:spock-core:${spockVersion}"
            dependency "org.spockframework:spock-spring:${spockVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            dependency "cglib:cglib-nodep:${cglibVersion}"

            // misc
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "com.bugsnag:bugsnag:${bugsnagVersion}"
            dependency "javax.servlet:javax.servlet-api:${servletVersion}"
        }
    }

    // dependencies for all projects
    dependencies {
        testCompile "org.slf4j:slf4j-api"
        testCompile "org.codehaus.groovy:groovy-all"
        testCompile "org.spockframework:spock-core"
        testCompile "org.assertj:assertj-core"
    }
}

// release plugin configuration
release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = 'v${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
    }
}

task wrapper(type: Wrapper) {
    description "Sets up gradle wrapper."
    //gradleVersion = "2.13"
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
}

// EOF
