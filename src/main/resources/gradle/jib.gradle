//
// docker.gradle
//

import java.time.Instant
import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

private void checkPrerequisites() {
  checkIfRequiredPluginsAreApplied()
}

def checkIfRequiredPluginsAreApplied() {
  requireAppliedPlugin("com.palantir.git-version", "0.12.3")
  requireAppliedPlugin("com.google.cloud.tools.jib", "3.1.1")
}

private ZonedDateTime lastCommitDate(def git) {
  def timeSeconds = (long) git.log().call().next().getCommitTime()
  def instant = Instant.ofEpochMilli(timeSeconds * 1000)
  def zoneId = ZoneOffset.UTC
  ZonedDateTime.ofInstant(instant, zoneId)
}

/**
 * Returns list of <b>additional</b> tags that created docker image should be tagged with.<p/>
 *
 * @return list of tags that can be used in {@code docker.tags} property
 * @see <a href="https://github.com/palantir/gradle-docker#docker-plugin">gradle-palantir-docker plugin docs</a>
 */
private List<String> dockerImageTags() {
  logger.info("dockerImageTags(): running in: ${rootProject.name} -> ${project.name}")

  def gitInfo = gitInfo()
  if (!gitInfo) {
    return []
  }

  def branchName = gitInfo?.branch
                        ?.replaceAll('[^\\w\\-\\.]+', '-')
                        ?.replaceAll('\\-{2,}', '-')
                        ?.trim()
                        ?.toLowerCase()
                        ?: ''
  def tagName = gitInfo.tag ?: ''
  def projectVersion = version?.trim() ?: ''

  // We don't want to push version tags in some cases;
  //
  // WHY? See this video and https://www.youtube.com/watch?v=rqrw3_604_c
  //
  // WARNING: consequence of this decision is that app releases must be done
  //          in branches other than `master`
  def allowVersionTags = !(branchName in [ 'master' ])

  logger.info("working on a git commit: {}, branch: '{}', tag: '{}', project version: '{}'",
    gitInfo.commit, branchName, tagName, projectVersion)

  // use git hashes for additional tags by default
  def result = [ gitInfo.commit, gitInfo.commit_full ]
  
  // include project version, but only if it's not a snapshot
  if (allowVersionTags && projectVersion && !projectVersion.toLowerCase().endsWith('-snapshot')) {
    result += projectVersion
  }

  // git tag?
  if (allowVersionTags && tagName) {
    result += tagName
  }

  // CI systems
  if (System.getenv("CI") == "true") {
    // CircleCI
    def value = System.getenv("CIRCLE_BUILD_NUM")
    if (value) {
      result += ["circleci-" + value]
    }

    // Travis
    value = System.getenv("TRAVIS_BUILD_NUMBER")
    if (value) {
      result += ["travis-" + value]
    }
  }

  logger.info("docker image additional tags: {}", result)
  result
}

def getGitInfo() {
  checkPrerequisites()
  def gitInfo = versionDetails()
  logger.info("raw git info: {}", gitInfo)
  return gitInfo
}

ext.gitInfo = {
  try {
    def info = getGitInfo()
    def dirty = info.version.endsWith('.dirty')

    def res = [
      branch:       info.getBranchName(),
      commit_full:  info.getGitHashFull(),
      commit:       info.getGitHash(),
      last_tag:     info.getLastTag(),
      is_tag:       info.getIsCleanTag(),
      tag:          info.getIsCleanTag() ? info.getVersion() : '',
      version:      info.getVersion(),
      clean:        !dirty,
      dirty:        dirty,
    ]

    // remove nulls/empty values
    res = res.findAll { it.value != null && !it.value.toString().isEmpty() }
    logger.info("git info: {}", res)
    return res;
  } catch (Exception e) {
    logger.warn("exception while trying to obtain git commit info: {}", e.toString())
    logger.debug("git exception:", e)
    return [:]
  }
}

ext.dockerAdditionalTags = {
  dockerImageTags()
}

task jibInfo {
  group "jib"
  description = "Displays jib docker image name and any additional tags."
  doLast {
    println("image: " + jib.to.image)
    def tags = jib.to.tags ? jib.to.tags : []
    println("tags:  " + tags.join(", "))
  }
}

// vim:shiftwidth=2 softtabstop=2 expandtab
// EOF
