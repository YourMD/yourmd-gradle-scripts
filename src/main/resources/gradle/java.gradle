//
// build.gradle
//

import org.gradle.util.GradleVersion

/**
 * Tells whether javadoc plugin is enabled. Javadoc generation can be disabled also
 * by setting {@code javadoc.enabled=false} system property.
 *
 * @return true/false
 */
ext.isJavadocPublishingEnabled = {
  def propName = "javadoc.enabled"
  def propVal = System.getProperty(propName)
  def envVal = System.getenv(propName.toUpperCase().replace(".", "_"))
  def value = propVal ?: envVal ?: "false"
  Boolean.parseBoolean(value)
}

/**
 * <p>Returns modified environment variable map, with some variables removed.</p>
 * <p>Removed env variables:
 * <ul>
 * <li>variables with null or empty values</li>
 * <li>variables which contain ${} in their values</li>
 * </ul>
 * </p>
 */
ext.getCleanEnvironment = { it ->
  def res = [:]
  logger.info("Removing malformed environment variables from environment")
  System.getenv().forEach({ key, val ->
    if (key != null && val != null && !val.isEmpty() && !val.contains('$')) {
      res[key] = val
    }
  })

  if (logger.isInfoEnabled()) {
    logger.info("Returning clean evironment: ")
    res.each { logger.info(String.format(" %-30s %s", it.key, it.value)) }
  }

  res
}
/**
 * <p>Creates copy of final artifact jar without version identifier.</p>
 * <p>Uses <i>${project.buildDir}/libs/${project.name}-${version}.jar</i> as source
 * and <i>${project.buildDir}/libs/${project.name}.jar</i> as destination
 * @return number of files copied
 * @throws IOException in case of io errors
 * @throws GradleScriptException in case of bad input
 */
ext.makeDeployArtifact = { ->
  copyFile("${project.buildDir}/libs/${project.name}-${version}.jar",
       "${project.buildDir}/libs/${project.name}.jar")
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "io.spring.dependency-management"

///////////////////////////////////////////////////////////
//                     EXT VARIABLES                     //
///////////////////////////////////////////////////////////

// groovy
setExtVar("groovyVersion",      "2.5.14")
setExtVar("groovy3Version",     "3.0.13")
setExtVar("groovy4Version",     "4.0.6")

// logging
setExtVar("slf4jVersion",       "1.7.36")
setExtVar("logbackVersion",     "1.2.11")

// testing
setExtVar("assertjVersion",     "3.23.1")
setExtVar("spockVersion",       "2.3-groovy-3.0")
setExtVar("cglibVersion",       "3.3.0")

// misc
setExtVar("lombokVersion",      "1.18.20")
setExtVar("servletVersion",     "3.1.0")
setExtVar("bugsnagVersion",     "3.6.2")
setExtVar("rxjavaVersion",      "1.3.8")
setExtVar("rxjava2Version",     "2.2.21")
setExtVar("rxjava3Version",     "3.1.5")
setExtVar("guavaVersion",       "31.1-jre")
setExtVar("awsSdkVersion",      "1.12.336")
setExtVar("awsSdk2Version",     "2.18.12")

// swagger/springfox
setExtVar("swaggerVersion",     "1.6.8")
setExtVar("swagger3Version",    "2.2.6")
setExtVar("springfoxVersion",   "3.0.0")

// java compiler
setExtVar("javaSourceVersion",  "11")
setExtVar("javaTargetVersion",  "11")

///////////////////////////////////////////////////////////

// dependency-management plugin is a must, build will fail if plugin is not applied
requireAppliedPlugin("io.spring.dependency-management", "1.1.0")

allprojects {
  apply plugin: "java"
  apply plugin: "groovy"
  apply plugin: "idea"
  apply plugin: "eclipse"
  apply plugin: "maven-publish"
  apply plugin: "io.spring.dependency-management"

  repositories {
    mavenLocal()

    maven {
      name          "ymdreleases"
      url           "s3://yourmd-artifacts/maven/releases"
      credentials   (AwsCredentials, setupAwsCredentials)

      mavenContent  { releasesOnly() }
      
      // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_a_repository_filter
      content       { 
        includeGroupByRegex '^md\\.your.*'
        includeGroupByRegex '^com\\.github\\.tsc4j.*'
      }
    }

    maven {
      name          "ymdsnapshots"
      url           "s3://yourmd-artifacts/maven/snapshots"
      credentials   (AwsCredentials, setupAwsCredentials)

      mavenContent  { snapshotsOnly() }

      // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_a_repository_filter
      content       {
        includeGroupByRegex '^md\\.your.*'
        includeGroupByRegex '^com\\.github\\.tsc4j.*'
      }
    }

    mavenCentral()

    maven {
      url           "https://oss.sonatype.org/content/repositories/snapshots"
      mavenContent  { snapshotsOnly() }
    }
  }

  plugins.withType(JavaPlugin) {
    // java bytecode version
    sourceCompatibility = "${javaSourceVersion}"
    targetCompatibility = "${javaTargetVersion}"

    // create jar only if there is something to package
    boolean hasSources = !sourceSets.main.allSource.files.isEmpty()
    jar {
      onlyIf { hasSources }
    }

    // create sources jar
    task sourcesJar(type: Jar, dependsOn: classes, overwrite: false) {
      archiveClassifier = "sources"
      from sourceSets.main.allSource

      if (GradleVersion.current() >= GradleVersion.version("6.0")) {
        duplicatesStrategy = DuplicatesStrategy.FAIL // don't allow duplicates
      }
    }

    // javadoc options
    javadoc {
      options.encoding "UTF-8"
      options.addStringOption("Xdoclint:none", "-quiet")

      // if we're on JDK9+ we can enable html5 javadoc output
      if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
      }
    }

    task javadocJar(type: Jar, dependsOn: [classes,javadoc], overwrite: false) {
      archiveClassifier = "javadoc"
      from javadoc.destinationDir
    }

    // add compileOnly dependencies to test runtime classpath as well.
    sourceSets {
      test.compileClasspath += configurations.compileClasspath
      test.runtimeClasspath += configurations.compileClasspath
    }

    // set publish repos only if there are any sources to publish
    if (hasSources) {
      publishing {
        repositories {
          // https://discuss.gradle.org/t/maven-publish-specify-a-repo-as-being-a-snapshot-repo/374
          def dstRepo = project.version.endsWith("-SNAPSHOT") ?
              project.repositories.ymdsnapshots : project.repositories.ymdreleases

          // add repository for `maven` plugin
          add dstRepo

          // return repository for `maven-publish` plugin
          dstRepo
        }

        publications {
          mavenJava(MavenPublication) {
            from components.java

            versionMapping {
              usage('java-api')     { fromResolutionOf('runtimeClasspath') }
              usage('java-runtime') { fromResolutionResult() }
            }

            if (tasks.findByName("sourcesJar")) {
              artifact sourcesJar
            }
            if (isJavadocPublishingEnabled() && tasks.findByName("javadocJar")) {
              artifact javadocJar
            }
          }
        }
      }
    }
  }

  // compile groovy sources with invokedynamic support
  tasks.withType(GroovyCompile) {
    // gradle >= 5.6 warns about incremental groovy compilation if
    // java annotation processors are on classpath, gradle >= 6.0 will
    // fail the build
    options.incremental                     = false
    // enforce utf8 encoding for sources on systems with us-ascii locales
    options.encoding                        = "UTF-8"
    groovyOptions.optimizationOptions.indy  = true
    options.compilerArgs                    += [ "-Xlint:deprecation", "-Xlint:unchecked", "-Xdiags:verbose" ]
  }

  tasks.withType(JavaCompile) {
    options.incremental                     = true
    // enforce utf8 encoding for sources on systems with us-ascii locales
    options.encoding                        = "UTF-8"
    options.compilerArgs                    += [ "-Xlint:deprecation,overrides,divzero,empty,fallthrough,finally,unchecked,static,varargs", "-Xdiags:verbose" ]
    // TODO: in future :
    // options.compilerArgs                    += [ "-Xlint:deprecation,unchecked,classfile,divzero,empty,fallthrough,finally,options,overrides,rawtypes,removal,serial,static,varargs", "-Xdiags:verbose" ]
  }

  createTask("downloadDeps") {
    group       "Misc"
    description "Downloads all required dependencies."
    doLast {
      project.rootProject.allprojects.each { subProject ->
        subProject.buildscript.configurations.each { configuration ->
          if (isResolvableConfiguration(configuration)) {
            println("$subProject -> $configuration")
            configuration.resolve()
          }
        }
        subProject.configurations.each { configuration ->
          if (isResolvableConfiguration(configuration)) {
            println("$subProject -> $configuration")
            configuration.resolve()
          }
        }
      }
    }
  }

  // managed dependencies.
  dependencyManagement {
    // import BOMs
    imports {
      mavenBom "org.spockframework:spock-bom:${spockVersion}"
      mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSdkVersion}"
      mavenBom "software.amazon.awssdk:bom:${awsSdk2Version}"
    }

    dependencies {
      // groovy
      dependencySet(group: "org.codehaus.groovy", version: "${groovyVersion}") {
        entry "groovy"
        entry "groovy-all"
        entry "groovy-ant"
        entry "groovy-cli-commons"
        entry "groovy-cli-picocli"
        entry "groovy-console"
        entry "groovy-datetime"
        entry "groovy-docgenerator"
        entry "groovy-groovydoc"
        entry "groovy-groovysh"
        entry "groovy-jmx"
        entry "groovy-json"
        entry "groovy-jsr223"
        entry "groovy-macro"
        entry "groovy-nio"
        entry "groovy-servlet"
        entry "groovy-sql"
        entry "groovy-swing"
        entry "groovy-templates"
        entry "groovy-test"
        entry "groovy-test-junit5"
        entry "groovy-testng"
        entry "groovy-xml"
      }

      // logging
      dependency "org.slf4j:slf4j-api:${slf4jVersion}"
      dependency "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
      dependency "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
      dependency "org.slf4j:slf4j-jdk14:${slf4jVersion}"
      dependency "org.slf4j:jul-to-slf4j:${slf4jVersion}"
      dependency "org.slf4j:slf4j-log4j12:${slf4jVersion}"
      dependency "org.slf4j:slf4j-ext:${slf4jVersion}"
      dependency "org.slf4j:slf4j-simple:${slf4jVersion}"

      dependency "ch.qos.logback:logback-access:${logbackVersion}"
      dependency "ch.qos.logback:logback-classic:${logbackVersion}"

      // misc
      dependency "io.reactivex:rxjava:${rxjavaVersion}"
      dependency "io.reactivex.rxjava2:rxjava:${rxjava2Version}"
      dependency "io.reactivex.rxjava3:rxjava:${rxjava3Version}"

      // swagger/springfox
      dependency "io.springfox:springfox-boot-starter:${springfoxVersion}"
      dependency "io.swagger:swagger-annotations:${swaggerVersion}"
      dependency "io.swagger.core.v3:swagger-annotations:${swagger3Version}"

      // testing
      dependency "org.spockframework:spock-core:${spockVersion}"
      dependency "org.spockframework:spock-spring:${spockVersion}"
      dependency "org.spockframework:spock-specs:${spockVersion}"
      dependency "org.spockframework:spock-guice:${spockVersion}"
      dependency "org.spockframework:spock-tapestry:${spockVersion}"
      dependency "org.spockframework:spock-unitils:${spockVersion}"
      dependency "org.spockframework:spock-report:${spockVersion}"
      dependency "org.assertj:assertj-core:${assertjVersion}"
      dependency "cglib:cglib-nodep:${cglibVersion}"

      // misc
      dependency "org.projectlombok:lombok:${lombokVersion}"
      dependency "com.bugsnag:bugsnag:${bugsnagVersion}"
      dependency "javax.servlet:javax.servlet-api:${servletVersion}"
      dependency "com.google.guava:guava:${guavaVersion}"
    }
  }

  // dependencies for all projects
  dependencies {
    annotationProcessor     "org.projectlombok:lombok"
    compileOnly             "org.projectlombok:lombok"

    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation      "org.slf4j:slf4j-api"
    testImplementation      "org.codehaus.groovy:groovy-all"
    testImplementation      "org.spockframework:spock-core"
  }

  // tests
  test {
    failFast          = true
    systemProperties  System.getProperties()
    jvmArgs           '-XX:TieredStopAtLevel=1'
  }

  // test-logger plugin default configuration
  if (isPluginApplied("com.adarshr.test-logger")) {
    logger.info("[${project.name}] applying test-logger plugin default config")

    apply plugin: "com.adarshr.test-logger" // otherwise config below cannot is not applied
    testlogger {
      theme         "mocha"
      slowThreshold 5000
    }
  }

}

if (project.tasks.test) {
  project.tasks.test.environment = getCleanEnvironment()
}

// vim:shiftwidth=2 softtabstop=2 expandtab
// EOF
